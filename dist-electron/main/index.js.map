{"version":3,"file":"index.js","sources":["../../electron/main/index.ts"],"sourcesContent":["import { release } from 'node:os'\nimport { join } from 'node:path'\nimport { BrowserWindow, app, dialog, ipcMain, shell } from 'electron'\nimport { autoUpdater } from 'electron-updater'\n\nprocess.env.DIST_ELECTRON = join(__dirname, '..')\nprocess.env.DIST = join(process.env.DIST_ELECTRON, '../dist')\nprocess.env.PUBLIC = process.env.VITE_DEV_SERVER_URL\n  ? join(process.env.DIST_ELECTRON, '../public')\n  : process.env.DIST\n\n// Disable GPU Acceleration for Windows 7\nif (release().startsWith('6.1')) app.disableHardwareAcceleration()\n\n// Set application name for Windows 10+ notifications\nif (process.platform === 'win32') app.setAppUserModelId(app.getName())\n\nif (!app.requestSingleInstanceLock()) {\n  app.quit()\n  process.exit(0)\n}\n\n// Remove electron security warnings\n// This warning only shows in development mode\n// Read more on https://www.electronjs.org/docs/latest/tutorial/security\n// process.env['ELECTRON_DISABLE_SECURITY_WARNINGS'] = 'true'\n\nautoUpdater.autoDownload = false\nautoUpdater.autoInstallOnAppQuit = true\n\nlet win: BrowserWindow | null = null\n// Here, you can also use other preload\nconst preload = join(__dirname, '../preload/index.js')\nconst url = process.env.VITE_DEV_SERVER_URL\nconst indexHtml = join(process.env.DIST, 'index.html')\n\nasync function createWindow() {\n  win = new BrowserWindow({\n    title: 'Main window',\n    icon: join(process.env.PUBLIC, 'favicon.ico'),\n    webPreferences: {\n      preload,\n      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production\n      // Consider using contextBridge.exposeInMainWorld\n      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation\n      nodeIntegration: true,\n      contextIsolation: false,\n      webSecurity: false,\n\n    },\n  })\n\n  if (process.env.VITE_DEV_SERVER_URL) {\n    win.loadURL(url)\n    // Open devTool if the app is not packaged\n    win.webContents.openDevTools()\n  }\n  else {\n    win.loadFile(indexHtml)\n  }\n\n  // Test actively push message to the Electron-Renderer\n  win.webContents.on('did-finish-load', () => {\n    win?.webContents.send('main-process-message', new Date().toLocaleString())\n  })\n\n  // Make all links open with the browser, not with the application\n  win.webContents.setWindowOpenHandler(({ url }) => {\n    if (url.startsWith('https:')) shell.openExternal(url)\n    return { action: 'deny' }\n  })\n}\nlet settingsWindow: BrowserWindow | null = null\n\nipcMain.on('open-settings-window', (event) => {\n  if (settingsWindow === null) {\n    settingsWindow = new BrowserWindow({\n      title: 'Setting',\n      width: 700,\n      height: 800,\n      x: 600,\n      y: 200,\n      frame: true,\n      titleBarStyle: 'default',\n      // modal: true, // 模态窗口，会阻塞父窗口 (macOS 不支持)\n      parent: win!,\n      resizable: false,\n      fullscreenable: false,\n      webPreferences: {\n        nodeIntegration: true,\n        contextIsolation: false,\n      },\n    })\n    settingsWindow.on('closed', () => {\n      settingsWindow = null\n    })\n    // const w = BrowserWindow.getFocusedWindow()\n    // w!.setWindowButtonVisibility(true)\n    if (process.env.VITE_DEV_SERVER_URL) {\n      settingsWindow.webContents.openDevTools()\n      settingsWindow.loadURL(`${url}#/setting`)\n    }\n\n    else { settingsWindow.loadFile(indexHtml, { hash: '/setting' }) }\n  }\n  else {\n    settingsWindow.show()\n  }\n})\n\napp.on('window-all-closed', () => {\n  win = null\n  if (process.platform !== 'darwin') app.quit()\n})\n\napp.on('second-instance', () => {\n  if (win) {\n    // Focus on the main window if the user tried to open another\n    if (win.isMinimized()) win.restore()\n    win.focus()\n  }\n})\napp.whenReady().then(() => {\n  createWindow()\n  autoUpdater.checkForUpdates()\n})\napp.on('activate', () => {\n  const allWindows = BrowserWindow.getAllWindows()\n  if (allWindows.length)\n    allWindows[0].focus()\n  else\n    createWindow()\n})\n\n// Global exception handler\nprocess.on('uncaughtException', (err) => {\n  console.log(err)\n})\n\n/* New Update Available */\n\nautoUpdater.on('error', (err) => {\n  dialog.showErrorBox('AutoUpdater Error', err.message)\n})\n\nautoUpdater.on('update-available', (info) => {\n  dialog.showMessageBox({\n    type: 'info',\n    title: `发现新版本：${info.version}`,\n    message: '是否立即后台下载更新?',\n    buttons: ['是', '否'],\n  }).then(({ response }) => {\n    if (response === 0)\n      autoUpdater.downloadUpdate() // 下载更新\n  })\n})\n\nautoUpdater.on('update-downloaded', () => {\n  dialog.showMessageBox({\n    type: 'info',\n    title: '更新已下载',\n    message: '是否立即安装并重新启动应用?',\n    buttons: ['是', '否'],\n  }).then(({ response }) => {\n    if (response === 0)\n      autoUpdater.quitAndInstall() // 退出并安装更新\n  })\n})\n"],"names":["join","release","app","autoUpdater","BrowserWindow","url","shell","ipcMain","dialog"],"mappings":"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"}